==== 0725 ====
>>> chapter 1
SQL

1) DDL
테이블 생성 CREATE TABLE mytest(no number(3), name varchar2(20));
------------------------------------------------------------------
2) SELECT
데이터 조회	 select * from emp;
	 select * from emp where empno=3076;

3) DML
테이블에 행 삽입 INSERT INTO mytest (no, name) VALUES(333, 'Peter');
테이블에 행 삭제 DELETE FROM mytest WHERE no=333;
테이블의 행 수정 UPDATE mytest SET name='Robert' WHERE no=222;


>>> chapter 2
1) Projection
  * emp 테이블에서... 번호, 사원이름, 업무를 검색
    -> SELECT empno, ename, job FROM emp;
  * emp 테이블에서... 이름, 급여, 부서번호 검색
    -> SELECT ename, sal, deptno FROM emp;
  * emp 테이블에서... 이름, 급여, 급여에 300을 더한 급여, 부서번호 검색
    -> SELECT ename, sal, sal+300 FROM emp;

  # 컬럼에 연산이 적용되었을 때는 주로 Alias를 사용
    -> SELECT ename, sal, sal+300 AS 급여인상 FROM emp;	// Alias 추가
    -> SELECT ename, sal, sal+300 급여인상 FROM emp;	// AS 생략가능 -> 추천
  # Alias에 특수문자, 공백 사용하고 싶을 경우
    -> SELECT ename, sal, sal+300 "급여 인상" FROM emp;	// 공백시 " "로 묶어준다

  * emp 테이블에서... 사원번호, 업무, 급여, sal*12 (이름을 Annual Salary로 지정)
    -> SELECT empno, job, sal, sal*12 "Annual Salary" FROM emp;


2) Selection
  * emp 테이블에서... 업무가 SALESMAN인 사원의 이름, 업무, 급여를 검색
    -> SELECT ename, job, sal FROM emp WHERE job='SALESMAN';


3) ORDER BY
  # ORDER BY는 명령어 가장 마지막에 사용한다.

  * 급여 순으로 오름차순 정렬
     SELECT ename, job, sal 
     FROM emp 
     WHERE job='SALESMAN' 
     ORDER BY sal;
  * 급여 순으로 오름차순 정렬
     SELECT ename, job, sal 
     FROM emp 
     WHERE job='SALESMAN' 
     ORDER BY sal DESC;	// 내림차순


 4) DISTINCT
  -> 중복을 제껴버리는 키워드 
  -> SELECT 바로 뒤에 나온다.

   * emp... 부서번호에 뭐가 있는지 궁금함. 중복 제거하고 출력
     -> SELECT DISTINCT deptno 
	FROM emp;
     -> SELECT DISTINCT(deptno) 
	FROM emp;

   # 10g 이전에는 DISTINCT 후 정렬 자동으로 됐었는데, 이젠 자동 정렬 안됨 -> ORDER BY로 직접 정렬
     -> SELECT DISTINCT(deptno) 
	FROM emp 
	ORDER BY deptno;



# NULL
  -> 0도 아니고 빈값도 아님. 별도의 의미를 가지는 값.
  (1)자격 없음(사장의 상사번호 NULL, SALESMAN 부서 외 영업실적 NULL)
  (2)미확정(신입사원의 부서 NULL)

  # Oracle에서는 Null을 가장 큰 값으로 취급.

  * emp...comm을 오름차순 정렬...사원이름, job, comm 출력
    -> SELECT ename, job, comm 
	FROM emp 
	ORDER BY comm;
  
  # null은 연산, 할당, 비교 불가능함

  * emp...comm이 null인 사원을 검색
    -> SELECT * FROM emp WHERE comm is null;
    -> SELECT * FROM emp WHERE comm is not null;
    -> SELECT * FROM emp WHERE comm=null;  // X. 결과 안나옴

  * emp... 사원의 연봉을 구하고 Alias 지정
    -> SELECT ename, job, sal, sal*12+comm 연봉 
	FROM emp;		// X. null 연산 안됨
    
  # null을 0으로 바꿔서 계산해야 하는데, 이때 사용하는게 NVL(NULL 아닐때 값, NULL일때 값) 함수
    -> SELECT ename, job, sal, sal*12+NVL(comm,0) 연봉 
	FROM emp;	// comm이 null이면 0, null 아니면 comm 그대로 사용

6) 연결 연산자
  # 문자열과 컬럼을 연결하고 싶을 때 ||를 사용한다.
    -> SELECT ename||'씨! 당신의 급여가 ' || sal ||'에서 ' ||  sal*1.02 || '로 조정되었습니다.' 
	FROM emp;


7) ROWNUM(현업에서 많이 쓰임)
  # 
    -> SELECT ROWID, ROWNUM, ename, sal
	FROM emp;

  # ROWNUM은 '이하(ROWNUM < 4)'만 사용 가능함. '~이상(ROWNUM > 4)'인 조건은 불가능

  * emp...급여를 가장 많이 받는 사원 랭킹 TOP3 출력
    -> SELECT ROWNUM, ename, sal 
	FROM emp 
	WHERE ROWNUM<4 
	ORDER BY sal DESC;	// X. ORDER BY가 가장 마지막에 수행됨

    -> SELECT ename, job, sal
	FROM (SELECT * FROM emp ORDER BY sal DESC)
	WHERE ROWNUM<=3		// O.